{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2017-11-18T12:36:34.064Z",
    "end": "2017-11-18T12:36:41.214Z",
    "duration": 7150,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "同步异常处理",
        "suites": [],
        "tests": [
          {
            "title": "异常流,",
            "fullTitle": "同步异常处理 异常流,",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a11 = function () {\n  this.finish(2);\n};\nconst b11 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a11).to(b11).to((result, opera) => {\n  if ([].toString.call(result) === '[object Error]') {\n    console.log('在b任务捕捉到错误');\n    opera.finish(undefined, result);\n  } else {\n    this.finish(result);\n  }\n}).to((result, err) => {\n  if (err) {\n    console.log('在最后也捕捉到错误!');\n  }\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "862d62dc-4747-4e13-bd09-ac2f074d6da9",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "catch捕获异常,",
            "fullTitle": "同步异常处理 catch捕获异常,",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n}).catch((err) => {\n  if (err) {\n    console.log('catch捕捉到错误!');\n  }\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "e405b716-a923-4626-ac45-3077b6bb83cf",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "通过监听器捕捉错误",
            "fullTitle": "同步异常处理 通过监听器捕捉错误",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\nconst myTask = tasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n});\nmyTask.on('err', () => {\n  console.log('监听器捕捉到错误!');\n  done();\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "c1e21da7-1b59-43f6-8b0f-3a3d8df39833",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "uuid": "af7d5324-9499-4802-8973-50768d81ff1b",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\yc-task-manager\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "passes": [
          {
            "title": "异常流,",
            "fullTitle": "同步异常处理 异常流,",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a11 = function () {\n  this.finish(2);\n};\nconst b11 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a11).to(b11).to((result, opera) => {\n  if ([].toString.call(result) === '[object Error]') {\n    console.log('在b任务捕捉到错误');\n    opera.finish(undefined, result);\n  } else {\n    this.finish(result);\n  }\n}).to((result, err) => {\n  if (err) {\n    console.log('在最后也捕捉到错误!');\n  }\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "862d62dc-4747-4e13-bd09-ac2f074d6da9",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "catch捕获异常,",
            "fullTitle": "同步异常处理 catch捕获异常,",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n}).catch((err) => {\n  if (err) {\n    console.log('catch捕捉到错误!');\n  }\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "e405b716-a923-4626-ac45-3077b6bb83cf",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "通过监听器捕捉错误",
            "fullTitle": "同步异常处理 通过监听器捕捉错误",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\nconst myTask = tasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n});\nmyTask.on('err', () => {\n  console.log('监听器捕捉到错误!');\n  done();\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "c1e21da7-1b59-43f6-8b0f-3a3d8df39833",
            "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4,
        "rootEmpty": false
      },
      {
        "title": "异步任务流程",
        "suites": [],
        "tests": [
          {
            "title": "简单线性结构",
            "fullTitle": "异步任务流程 简单线性结构",
            "timedOut": false,
            "duration": 3001,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a21 = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 1000);\n};\nconst b21 = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a21).to(b21).to((result) => {\n  console.log(result);\n  assert.equal(result, 6 , 'the result is not 6');\n  done();\n}).catch((e) => {\n  console.log(e);\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "cfd76a75-5931-45c1-8f03-4883bd6f90aa",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "复杂的图结构",
            "fullTitle": "异步任务流程 复杂的图结构",
            "timedOut": false,
            "duration": 601,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const Aa = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 500);\n};\nconst Ab = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 600);\n};\nconst Ba = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 500);\n};\nconst Bb = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 600);\n};\nconst A = tasker(Aa, Ab);\nconst B = tasker(Ba, Bb);\ntasker(A, B).to((A, B) => {\n  console.log(A, B);\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "6577b198-3235-403a-910d-62493b43f492",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "提前完成任务",
            "fullTitle": "异步任务流程 提前完成任务",
            "timedOut": false,
            "duration": 1001,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.end(2);\n  }, 1000);\n};\nconst b = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a).to(b).to((result) => {\n  console.log('b任务被跳过,所以结果是' + result);\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "09f4cd67-b74c-43fb-b1d3-c96ed780e264",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "uuid": "01938f90-14b2-4296-b6ad-f97dad77ba53",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\yc-task-manager\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "passes": [
          {
            "title": "简单线性结构",
            "fullTitle": "异步任务流程 简单线性结构",
            "timedOut": false,
            "duration": 3001,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a21 = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 1000);\n};\nconst b21 = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a21).to(b21).to((result) => {\n  console.log(result);\n  assert.equal(result, 6 , 'the result is not 6');\n  done();\n}).catch((e) => {\n  console.log(e);\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "cfd76a75-5931-45c1-8f03-4883bd6f90aa",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "复杂的图结构",
            "fullTitle": "异步任务流程 复杂的图结构",
            "timedOut": false,
            "duration": 601,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const Aa = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 500);\n};\nconst Ab = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 600);\n};\nconst Ba = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 500);\n};\nconst Bb = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 600);\n};\nconst A = tasker(Aa, Ab);\nconst B = tasker(Ba, Bb);\ntasker(A, B).to((A, B) => {\n  console.log(A, B);\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "6577b198-3235-403a-910d-62493b43f492",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "提前完成任务",
            "fullTitle": "异步任务流程 提前完成任务",
            "timedOut": false,
            "duration": 1001,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.end(2);\n  }, 1000);\n};\nconst b = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a).to(b).to((result) => {\n  console.log('b任务被跳过,所以结果是' + result);\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "09f4cd67-b74c-43fb-b1d3-c96ed780e264",
            "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4603,
        "rootEmpty": false
      },
      {
        "title": "模式测试",
        "suites": [],
        "tests": [
          {
            "title": "竞争模式",
            "fullTitle": "模式测试 竞争模式",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 20);\n};\ntasker(a, b, {\n  mode: 'compete'\n}).to((who) => {\n  console.log(who + '率先完成');\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "a08234e5-0838-4648-894a-a24109bfd373",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "竞争模式 end测试一",
            "fullTitle": "模式测试 竞争模式 end测试一",
            "timedOut": false,
            "duration": 202,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.end('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n  done();\n}).to((who)=> {\n  console.log(who + '率先完成');\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "dc72d2a0-9e0a-42d8-827e-0bc62259db9a",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "竞争模式 end测试二",
            "fullTitle": "模式测试 竞争模式 end测试二",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.end('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n}).to((who)=> {\n  done();\n  console.log(who + '率先完成');\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "c9d7e8dd-6de9-4a5a-bae1-665ac8309505",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "uuid": "586717d2-415e-41f8-a41a-e4d3b73debe0",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\yc-task-manager\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "passes": [
          {
            "title": "竞争模式",
            "fullTitle": "模式测试 竞争模式",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 20);\n};\ntasker(a, b, {\n  mode: 'compete'\n}).to((who) => {\n  console.log(who + '率先完成');\n  done();\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "a08234e5-0838-4648-894a-a24109bfd373",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "竞争模式 end测试一",
            "fullTitle": "模式测试 竞争模式 end测试一",
            "timedOut": false,
            "duration": 202,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.end('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n  done();\n}).to((who)=> {\n  console.log(who + '率先完成');\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "dc72d2a0-9e0a-42d8-827e-0bc62259db9a",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "竞争模式 end测试二",
            "fullTitle": "模式测试 竞争模式 end测试二",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.end('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n}).to((who)=> {\n  done();\n  console.log(who + '率先完成');\n}).run();",
            "err": {},
            "isRoot": false,
            "uuid": "c9d7e8dd-6de9-4a5a-bae1-665ac8309505",
            "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 424,
        "rootEmpty": false
      },
      {
        "title": "超时处理",
        "suites": [],
        "tests": [
          {
            "title": "任务超时",
            "fullTitle": "超时处理 任务超时",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 20);\n};\nconst myTask = tasker(a, b).to((who) => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 100\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "16b566cc-061f-4ca9-96bf-66729a416eb1",
            "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "任务超时 - 取消任务超时监听",
            "fullTitle": "超时处理 任务超时 - 取消任务超时监听",
            "timedOut": false,
            "duration": 2002,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    myTask.removeAllListeners('timeout');\n    this.finish();\n  }, 200);\n};\nconst myTask = tasker(a, b).to(() => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 1000\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "97032116-3193-4df4-9237-d82305e889eb",
            "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "uuid": "272aec1b-20f9-41db-a739-bca10c526ab3",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\yc-task-manager\\.tmp\\mocha-webpack\\1511008064769\\bundle.js",
        "passes": [
          {
            "title": "任务超时",
            "fullTitle": "超时处理 任务超时",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 20);\n};\nconst myTask = tasker(a, b).to((who) => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 100\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "16b566cc-061f-4ca9-96bf-66729a416eb1",
            "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "任务超时 - 取消任务超时监听",
            "fullTitle": "超时处理 任务超时 - 取消任务超时监听",
            "timedOut": false,
            "duration": 2002,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    myTask.removeAllListeners('timeout');\n    this.finish();\n  }, 200);\n};\nconst myTask = tasker(a, b).to(() => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 1000\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
            "err": {},
            "isRoot": false,
            "uuid": "97032116-3193-4df4-9237-d82305e889eb",
            "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2101,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0530be74-78ae-4892-ae88-efe1da779671",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "异常流,",
      "fullTitle": "同步异常处理 异常流,",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a11 = function () {\n  this.finish(2);\n};\nconst b11 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a11).to(b11).to((result, opera) => {\n  if ([].toString.call(result) === '[object Error]') {\n    console.log('在b任务捕捉到错误');\n    opera.finish(undefined, result);\n  } else {\n    this.finish(result);\n  }\n}).to((result, err) => {\n  if (err) {\n    console.log('在最后也捕捉到错误!');\n  }\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "862d62dc-4747-4e13-bd09-ac2f074d6da9",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "catch捕获异常,",
      "fullTitle": "同步异常处理 catch捕获异常,",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n}).catch((err) => {\n  if (err) {\n    console.log('catch捕捉到错误!');\n  }\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "e405b716-a923-4626-ac45-3077b6bb83cf",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "通过监听器捕捉错误",
      "fullTitle": "同步异常处理 通过监听器捕捉错误",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\nconst myTask = tasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n});\nmyTask.on('err', () => {\n  console.log('监听器捕捉到错误!');\n  done();\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "c1e21da7-1b59-43f6-8b0f-3a3d8df39833",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "简单线性结构",
      "fullTitle": "异步任务流程 简单线性结构",
      "timedOut": false,
      "duration": 3001,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a21 = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 1000);\n};\nconst b21 = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a21).to(b21).to((result) => {\n  console.log(result);\n  assert.equal(result, 6 , 'the result is not 6');\n  done();\n}).catch((e) => {\n  console.log(e);\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "cfd76a75-5931-45c1-8f03-4883bd6f90aa",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "复杂的图结构",
      "fullTitle": "异步任务流程 复杂的图结构",
      "timedOut": false,
      "duration": 601,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const Aa = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 500);\n};\nconst Ab = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 600);\n};\nconst Ba = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 500);\n};\nconst Bb = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 600);\n};\nconst A = tasker(Aa, Ab);\nconst B = tasker(Ba, Bb);\ntasker(A, B).to((A, B) => {\n  console.log(A, B);\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "6577b198-3235-403a-910d-62493b43f492",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "提前完成任务",
      "fullTitle": "异步任务流程 提前完成任务",
      "timedOut": false,
      "duration": 1001,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.end(2);\n  }, 1000);\n};\nconst b = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a).to(b).to((result) => {\n  console.log('b任务被跳过,所以结果是' + result);\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "09f4cd67-b74c-43fb-b1d3-c96ed780e264",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式",
      "fullTitle": "模式测试 竞争模式",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 20);\n};\ntasker(a, b, {\n  mode: 'compete'\n}).to((who) => {\n  console.log(who + '率先完成');\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "a08234e5-0838-4648-894a-a24109bfd373",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式 end测试一",
      "fullTitle": "模式测试 竞争模式 end测试一",
      "timedOut": false,
      "duration": 202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.end('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n  done();\n}).to((who)=> {\n  console.log(who + '率先完成');\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "dc72d2a0-9e0a-42d8-827e-0bc62259db9a",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式 end测试二",
      "fullTitle": "模式测试 竞争模式 end测试二",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.end('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n}).to((who)=> {\n  done();\n  console.log(who + '率先完成');\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "c9d7e8dd-6de9-4a5a-bae1-665ac8309505",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "任务超时",
      "fullTitle": "超时处理 任务超时",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 20);\n};\nconst myTask = tasker(a, b).to((who) => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 100\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "16b566cc-061f-4ca9-96bf-66729a416eb1",
      "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "任务超时 - 取消任务超时监听",
      "fullTitle": "超时处理 任务超时 - 取消任务超时监听",
      "timedOut": false,
      "duration": 2002,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    myTask.removeAllListeners('timeout');\n    this.finish();\n  }, 200);\n};\nconst myTask = tasker(a, b).to(() => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 1000\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "97032116-3193-4df4-9237-d82305e889eb",
      "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "异常流,",
      "fullTitle": "同步异常处理 异常流,",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a11 = function () {\n  this.finish(2);\n};\nconst b11 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a11).to(b11).to((result, opera) => {\n  if ([].toString.call(result) === '[object Error]') {\n    console.log('在b任务捕捉到错误');\n    opera.finish(undefined, result);\n  } else {\n    this.finish(result);\n  }\n}).to((result, err) => {\n  if (err) {\n    console.log('在最后也捕捉到错误!');\n  }\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "862d62dc-4747-4e13-bd09-ac2f074d6da9",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "catch捕获异常,",
      "fullTitle": "同步异常处理 catch捕获异常,",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\ntasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n}).catch((err) => {\n  if (err) {\n    console.log('catch捕捉到错误!');\n  }\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "e405b716-a923-4626-ac45-3077b6bb83cf",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "通过监听器捕捉错误",
      "fullTitle": "同步异常处理 通过监听器捕捉错误",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a12 = function () {\n  this.finish(2);\n};\nconst b12 = function (a) {\n  throw new Error();\n  this.finish(3 + a);\n};\nconst myTask = tasker(a12).to(b12).to((result) => {\n  console.log('计算的结果是' + result);\n});\nmyTask.on('err', () => {\n  console.log('监听器捕捉到错误!');\n  done();\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "c1e21da7-1b59-43f6-8b0f-3a3d8df39833",
      "parentUUID": "af7d5324-9499-4802-8973-50768d81ff1b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "简单线性结构",
      "fullTitle": "异步任务流程 简单线性结构",
      "timedOut": false,
      "duration": 3001,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a21 = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 1000);\n};\nconst b21 = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a21).to(b21).to((result) => {\n  console.log(result);\n  assert.equal(result, 6 , 'the result is not 6');\n  done();\n}).catch((e) => {\n  console.log(e);\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "cfd76a75-5931-45c1-8f03-4883bd6f90aa",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "复杂的图结构",
      "fullTitle": "异步任务流程 复杂的图结构",
      "timedOut": false,
      "duration": 601,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const Aa = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 500);\n};\nconst Ab = function () {\n  setTimeout(() => {\n    this.finish(2);\n  }, 600);\n};\nconst Ba = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 500);\n};\nconst Bb = function () {\n  setTimeout(() => {\n    this.finish(3);\n  }, 600);\n};\nconst A = tasker(Aa, Ab);\nconst B = tasker(Ba, Bb);\ntasker(A, B).to((A, B) => {\n  console.log(A, B);\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "6577b198-3235-403a-910d-62493b43f492",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "提前完成任务",
      "fullTitle": "异步任务流程 提前完成任务",
      "timedOut": false,
      "duration": 1001,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.end(2);\n  }, 1000);\n};\nconst b = function (a) {\n  setTimeout(() => {\n    this.finish(3 + a);\n  }, 2000);\n};\ntasker(a).to(b).to((result) => {\n  console.log('b任务被跳过,所以结果是' + result);\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "09f4cd67-b74c-43fb-b1d3-c96ed780e264",
      "parentUUID": "01938f90-14b2-4296-b6ad-f97dad77ba53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式",
      "fullTitle": "模式测试 竞争模式",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 20);\n};\ntasker(a, b, {\n  mode: 'compete'\n}).to((who) => {\n  console.log(who + '率先完成');\n  done();\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "a08234e5-0838-4648-894a-a24109bfd373",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式 end测试一",
      "fullTitle": "模式测试 竞争模式 end测试一",
      "timedOut": false,
      "duration": 202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.end('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n  done();\n}).to((who)=> {\n  console.log(who + '率先完成');\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "dc72d2a0-9e0a-42d8-827e-0bc62259db9a",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "竞争模式 end测试二",
      "fullTitle": "模式测试 竞争模式 end测试二",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish('任务a');\n  }, 1000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.end('任务b');\n  }, 200);\n};\ntasker(b, a, {\n  mode: 'compete'\n}).to((who, opera) => {\n  console.log('经过中间任务');\n  opera.finish(who);\n}).to((who)=> {\n  done();\n  console.log(who + '率先完成');\n}).run();",
      "err": {},
      "isRoot": false,
      "uuid": "c9d7e8dd-6de9-4a5a-bae1-665ac8309505",
      "parentUUID": "586717d2-415e-41f8-a41a-e4d3b73debe0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "任务超时",
      "fullTitle": "超时处理 任务超时",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 20);\n};\nconst myTask = tasker(a, b).to((who) => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 100\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "16b566cc-061f-4ca9-96bf-66729a416eb1",
      "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "任务超时 - 取消任务超时监听",
      "fullTitle": "超时处理 任务超时 - 取消任务超时监听",
      "timedOut": false,
      "duration": 2002,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = function () {\n  setTimeout(() => {\n    this.finish();\n  }, 2000);\n};\nconst b = function () {\n  setTimeout(() => {\n    myTask.removeAllListeners('timeout');\n    this.finish();\n  }, 200);\n};\nconst myTask = tasker(a, b).to(() => {\n  console.log('任务完成');\n  done();\n});\nmyTask.set({\n  timeout: 1000\n});\nmyTask.on('timeout', () => {\n  done();\n  console.log('任务超时，任务执行失败!');\n});\nmyTask.run();",
      "err": {},
      "isRoot": false,
      "uuid": "97032116-3193-4df4-9237-d82305e889eb",
      "parentUUID": "272aec1b-20f9-41db-a739-bca10c526ab3",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}